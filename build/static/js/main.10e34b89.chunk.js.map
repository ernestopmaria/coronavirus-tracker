{"version":3,"sources":["components/GlobalStatsItem.jsx","components/GlobalStats.jsx","components/Country.jsx","components/CountriesInfo.jsx","utils/utils.js","components/WorldMap.jsx","App.js","serviceWorker.js","index.js"],"names":["GlobalStatsItem","title","value","className","parseInt","toLocaleString","replace","toUpperCase","GlobalStats","useState","stats","setStats","useEffect","axios","get","then","res","data","results","total_cases","total_recovered","total_deaths","total_new_cases_today","total_new_deaths_today","cases","recovered","deaths","cases_today","deaths_today","catch","err","console","log","undefined","Object","entries","map","entrie","Country","props","percent_recovered","percent_deaths","toFixed","CountriesInfo","countries","setCountries","sortUp","setSortUp","tempCountries","values","countryitems","country","handleClick","el","rows","name","up","sortedCountries","target","id","sort","a","b","onClick","ourid","key","WorldMap","max","setMax","_max","path","selector","redDif","Math","trunc","vl","r","g","code","color","toLowerCase","fill","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gSAGe,SAASA,EAAT,GAA0C,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAC9C,OACM,yBAAKC,UAAU,2BACX,wBAAIA,UAAU,qBAAqBC,SAASF,GAAOG,kBACnD,0BAAMF,UAAU,qBACVF,EAAMK,QAAQ,KAAK,KAAKC,gBCJ3B,SAASC,IAAe,IAAD,EAERC,mBAAS,IAFD,mBAE3BC,EAF2B,KAEpBC,EAFoB,KAsBpC,OAlBEC,qBAAU,WAENC,IAAMC,IAAI,qDACLC,MAAM,SAAAC,GAAQ,IAAD,EAE8CA,EAAIC,KAAKC,QAAQ,GADlEC,EADG,EACHA,YAAaC,EADV,EACUA,gBAAiBC,EAD3B,EAC2BA,aAC9BC,EAFG,EAEHA,sBAAuBC,EAFpB,EAEoBA,uBAC9BZ,EAAS,CACLa,MAAOL,EACPM,UAAWL,EACXM,OAAQL,EACRM,YAAaL,EACbM,aAAcL,OAGrBM,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC/B,IAIH,yBAAK3B,UAAU,2BAEU8B,IAAhBvB,EAAMc,MACP,uDAEAU,OAAOC,QAAQzB,GAAO0B,KAAI,SAAAC,GAAM,OACxB,kBAACrC,EAAD,CACIC,MAAOoC,EAAO,GACdnC,MAAOmC,EAAO,S,WC/BvB,SAASC,EAAQC,GAAQ,IAE5BtC,EACsCsC,EADtCtC,MAAOkB,EAC+BoB,EAD/BpB,YAAaC,EACkBmB,EADlBnB,gBAAiBC,EACCkB,EADDlB,aACrCmB,EAAsCD,EAAtCC,kBAAmBC,EAAmBF,EAAnBE,eAE3B,OACI,4BACI,4BAAKxC,GACL,4BAAKG,SAASe,GAAad,kBAC3B,4BAAKD,SAASgB,GAAiBf,kBAC/B,4BAAKmC,EAAkBE,QAAQ,IAC/B,4BAAKtC,SAASiB,GAAchB,kBAC5B,4BAAKoC,EAAeC,QAAQ,KCTzB,SAASC,IAAiB,IAAD,EAEFlC,mBAAS,IAFP,mBAE7BmC,EAF6B,KAElBC,EAFkB,OAGRpC,mBAAS,IAHD,mBAG7BqC,EAH6B,KAGrBC,EAHqB,KAKpCnC,qBAAU,WAENC,IAAMC,IAAI,0DACLC,MAAK,SAAAC,GAEF,IAAMgC,EAAgBd,OAAOe,OAAPf,OAAA,IAAAA,CAAA,GAAkBlB,EAAIC,KAAKiC,aAAa,KAAKd,KAAI,SAAAe,GAAY,IAEvEhC,EAA+CgC,EAA/ChC,YAAaE,EAAkC8B,EAAlC9B,aACjBmB,EADmDW,EAApB/B,gBACSD,EAAgB,IACxDsB,EAAmBpB,EAAeF,EAAgB,IAKtD,OAHAqB,EAAoBA,GAAqB,EACzCC,EAAiBA,GAAkB,EAE5B,eACAU,EADP,CAEIV,iBACAD,yBAIRK,EAAaG,MAEhBnB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAE/B,IAEH,IAAMsB,EAAc,SAACC,GAEjB,ICxCiBC,EAAMC,EAAMC,EDwCvBC,GCxCWH,EDwCuBV,ECxCjBW,EDwC4BF,EAAGK,OAAOC,GCxChCH,EDwCoCV,ECtCvDZ,OAAOe,OAAOK,GAEfM,MAAK,SAACC,EAAGC,GAClB,OAAIN,EACQK,EAAEN,GAAQO,EAAEP,GAAS,EAAMO,EAAEP,GAAQM,EAAEN,IAAU,EAAI,EAErDM,EAAEN,GAAQO,EAAEP,GAAS,EAAMO,EAAEP,GAAQM,EAAEN,IAAU,EAAI,MDiCjER,GAAWD,GACXD,EAAaY,IAGjB,OACI,yBAAKtD,UAAU,iBACZ,+BACC,4BACI,wBAAIwD,GAAG,QAAQI,QAASX,GAAxB,WACA,wBAAIO,GAAG,cAAcI,QAASX,GAA9B,SACA,wBAAIO,GAAG,kBAAkBI,QAASX,GAAlC,aACA,wBAAIO,GAAG,oBAAoBI,QAASX,GAApC,KACA,wBAAIO,GAAG,eAAeI,QAASX,GAA/B,UACA,wBAAIO,GAAG,iBAAiBI,QAASX,GAAjC,MAEJ,+BAEQlB,OAAOe,OAAOL,GAAWR,KAAI,SAAAe,GACzB,GAAKA,EAAQa,MAGb,OAAO,kBAAC1B,EAAD,eAAS2B,IAAKd,EAAQa,OAAWb,U,WExDjD,SAASe,IAAY,IAAD,EAEGzD,mBAAS,IAFZ,mBAExBmC,EAFwB,KAEbC,EAFa,OAGTpC,mBAAS,GAHA,mBAGxB0D,EAHwB,KAGnBC,EAHmB,KAK/BxD,qBAAU,WAENC,IAAMC,IAAI,0DACLC,MAAK,SAAAC,GAEF,IAAIqD,EAAO,EAELrB,EAAgBd,OAAOe,OAAPf,OAAA,IAAAA,CAAA,GAAkBlB,EAAIC,KAAKiC,aAAa,KAAKd,KAAI,SAAAe,GAMnE,OAJIkB,EAAOlB,EAAQhC,cACfkD,EAAOlB,EAAQhC,aAGZ,eACAgC,MAIXN,EAAaG,GACboB,EAAOC,MAEVxC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAE/B,IAOL,OACI,yBAAK3B,UAAU,WACb,kBAAC,YAAD,CAAWmE,KAxCJ,qFAyCH,kBAAC,WAAD,CACIC,SAAS,SAITrC,OAAOe,OAAOL,GAAWR,KAAI,SAAAe,GAEzB,GAAKA,EAAQa,MAAb,CAIA,IAAMQ,EAAS,IAAMC,KAAKC,MAAMP,EAAM,KAIlCQ,EAHUF,KAAKC,MAAMvB,EAAQhC,YAAc,KAG9BqD,GAEjBG,IAAY,IAAMA,GAAI,KAEb,GACLA,GAAU,IACHA,EAAK,KAELA,EAAK,OADZA,GAAU,IAKVA,EAAK,MACLA,EAAK,KAMT,IAAMC,EAAID,EACJE,EAAI,IAAMF,EACVb,EAAI,IAAMa,EAEhB5C,QAAQC,IAAImB,EAAQ2B,KAAM3B,EAAQhC,YAAayD,EAAGC,EAAGf,GAErD,IAAMiB,EAAK,cAAUH,EAAV,aAAgBC,EAAhB,aAAsBf,EAAtB,KAEX,OAAQ,kBAAC,WAAD,CACI3D,UAAU,UACVwD,GAAIR,EAAQ2B,KACZP,SAAQ,WAAMpB,EAAQ2B,KAAKE,eAC3BC,KAAMF,EACNhB,QAAS,kBAvDjB,SAAC,GAA0B,IAAzB9D,EAAwB,EAAxBA,MAAOkB,EAAiB,EAAjBA,YACzB+D,MAAOjF,EAAQ,MAAQkB,GAsDgBiC,CAAYD,YCzE5CgC,MAXf,WACE,OACE,yBAAKhF,UAAU,OACb,wBAAIA,UAAU,UAAd,uBACA,kBAACK,EAAD,MACG,kBAAC0D,EAAD,MACH,kBAACvB,EAAD,QCFcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjF,MAAK,SAAAkF,GACJA,EAAaC,gBAEdrE,OAAM,SAAAsE,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.10e34b89.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default function GlobalStatsItem({title, value}) {\r\n  return (\r\n        <div className=\"div-globalinfo-box-item\">\r\n            <h4 className=\"global-info-value\">{parseInt(value).toLocaleString()}</h4>\r\n            <span className=\"global-info-title\">\r\n                { title.replace(/_/g,' ').toUpperCase() }\r\n            </span>\r\n        </div>  \r\n  );\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from   'axios';\r\nimport GlobalStatsItem from './GlobalStatsItem';\r\n\r\nexport default function GlobalStats() {\r\n\r\n    const [stats, setStats] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('https://thevirustracker.com/free-api?global=stats')\r\n            .then( res => {\r\n                const {total_cases, total_recovered, total_deaths, \r\n                       total_new_cases_today, total_new_deaths_today} = res.data.results[0]\r\n                setStats({\r\n                    cases: total_cases,\r\n                    recovered: total_recovered,\r\n                    deaths: total_deaths,\r\n                    cases_today: total_new_cases_today,\r\n                    deaths_today: total_new_deaths_today\r\n                });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"div-globalinfo-box\">\r\n        {\r\n            (stats.cases === undefined) ?\r\n            <h4>Loading informations...</h4> \r\n            :\r\n            Object.entries(stats).map(entrie => (\r\n                    <GlobalStatsItem \r\n                        title={entrie[0]}\r\n                        value={entrie[1]}\r\n                    />\r\n            ))\r\n            \r\n        }\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\n// import { Container } from './styles';\r\n\r\nexport default function Country(props) {\r\n\r\n    const { title, total_cases, total_recovered, total_deaths,\r\n            percent_recovered, percent_deaths } = props;\r\n\r\n    return (\r\n        <tr>\r\n            <td>{title}</td>\r\n            <td>{parseInt(total_cases).toLocaleString()}</td>\r\n            <td>{parseInt(total_recovered).toLocaleString()}</td>\r\n            <td>{percent_recovered.toFixed(2)}</td>\r\n            <td>{parseInt(total_deaths).toLocaleString()}</td>\r\n            <td>{percent_deaths.toFixed(2)}</td>\r\n        </tr>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Country from './Country';\r\nimport {sortRowsPerName} from '../utils/utils';\r\n// import { Container } from './styles';\r\n\r\nexport default function CountriesInfo() {\r\n  \r\n    const [countries, setCountries] = useState([]);\r\n    const [sortUp, setSortUp] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('https://thevirustracker.com/free-api?countryTotals=ALL')\r\n            .then(res => {\r\n\r\n                const tempCountries = Object.values({...res.data.countryitems[0]}).map(country => {\r\n                    \r\n                    const { total_cases, total_deaths, total_recovered } = country;\r\n                    let percent_recovered = ( total_recovered / total_cases ) * 100;\r\n                    let percent_deaths = ( total_deaths / total_cases ) * 100;\r\n\r\n                    percent_recovered = percent_recovered || 0;\r\n                    percent_deaths = percent_deaths || 0;\r\n\r\n                    return {\r\n                        ...country, \r\n                        percent_deaths, \r\n                        percent_recovered\r\n                    }\r\n                 });\r\n\r\n                setCountries(tempCountries);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }, []);\r\n\r\n    const handleClick = (el) => {\r\n        \r\n        const sortedCountries = sortRowsPerName(countries, el.target.id, sortUp);\r\n        setSortUp(!sortUp);\r\n        setCountries(sortedCountries);\r\n    }\r\n\r\n    return (\r\n        <div className=\"div-countries\">\r\n           <table>\r\n            <tr>\r\n                <th id=\"title\" onClick={handleClick}>Country</th>\r\n                <th id=\"total_cases\" onClick={handleClick}>Cases</th>\r\n                <th id=\"total_recovered\" onClick={handleClick}>Recovered</th>\r\n                <th id=\"percent_recovered\" onClick={handleClick}>%</th>\r\n                <th id=\"total_deaths\" onClick={handleClick}>Deaths</th>\r\n                <th id=\"percent_deaths\" onClick={handleClick}>%</th>\r\n            </tr>\r\n            <tbody>\r\n                {\r\n                    Object.values(countries).map(country => {\r\n                        if (!country.ourid) {\r\n                            return;\r\n                        }\r\n                        return <Country key={country.ourid} {...country}/>\r\n                    })\r\n                }\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n","\r\nfunction sortRowsPerName(rows, name, up) {\r\n\r\n    const _rows = Object.values(rows);\r\n\r\n    return _rows.sort((a, b) => {\r\n        if (up) {\r\n            return (a[name] > b[name]) ? 1 : ((b[name] > a[name]) ? -1 : 0);\r\n        } else {\r\n            return (a[name] < b[name]) ? 1 : ((b[name] < a[name]) ? -1 : 0);\r\n        }\r\n    });\r\n    \r\n}\r\n\r\nexport { sortRowsPerName };","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { SvgLoader, SvgProxy } from 'react-svgmt';\r\n\r\nconst svgUrl = \"https://raw.githubusercontent.com/flekschas/simple-world-map/master/world-map.svg\";\r\n\r\n\r\nexport default function WorldMap() {\r\n\r\n    const [countries, setCountries] = useState([]);\r\n    const [max, setMax] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get('https://thevirustracker.com/free-api?countryTotals=ALL')\r\n            .then(res => {\r\n\r\n                let _max = 0;\r\n\r\n                const tempCountries = Object.values({...res.data.countryitems[0]}).map(country => {\r\n                    \r\n                    if (_max < country.total_cases) {\r\n                        _max = country.total_cases;\r\n                    }\r\n                    \r\n                    return {\r\n                        ...country\r\n                    }\r\n                 });\r\n\r\n                setCountries(tempCountries);\r\n                setMax(_max);\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }, []);\r\n\r\n    const handleClick = ({title, total_cases}) => {\r\n        alert( title + '   ' + total_cases);\r\n    }\r\n\r\n\r\n  return (\r\n      <div className=\"map-box\">\r\n        <SvgLoader path={svgUrl} >\r\n            <SvgProxy \r\n                selector=\"path\" \r\n            />\r\n\r\n            {\r\n                Object.values(countries).map(country => {\r\n\r\n                    if (!country.ourid) {\r\n                        return;\r\n                    }\r\n\r\n                    const redDif = 255 - Math.trunc(max / 1000);\r\n                    const vlAux = Math.trunc(country.total_cases / 1000);\r\n\r\n               \r\n                    let vl = vlAux + redDif;\r\n\r\n                    vl = vl + ((255 - vl)/100);\r\n\r\n                    if (vl < 10) {\r\n                        vl = vl + 20;\r\n                    } else if (vl < 100) {\r\n                        vl = vl + 80;\r\n                    } else if (vl < 150) {\r\n                        vl = vl + 80;\r\n                    }\r\n\r\n                    if (vl > 255) {\r\n                        vl = 255;\r\n                    } \r\n\r\n                   \r\n\r\n\r\n                    const r = vl;\r\n                    const g = 255 - vl;\r\n                    const b = 155 - vl;\r\n\r\n                    console.log(country.code, country.total_cases, r, g, b)\r\n\r\n                    const color = `rgb(${r}, ${g}, ${b})`;\r\n\r\n                    return (<SvgProxy \r\n                                className=\"svg-map\"\r\n                                id={country.code}\r\n                                selector={`#${country.code.toLowerCase()}`} \r\n                                fill={color}\r\n                                onClick={() => handleClick(country)}\r\n                            />)\r\n                })\r\n            }\r\n            \r\n        </SvgLoader> \r\n      </div>\r\n   \r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport GlobalStats from './components/GlobalStats';\nimport CountriesInfo from './components/CountriesInfo';\nimport WorldMap from './components/WorldMap';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"emilly\">CORONAVIRUS TRACKER</h1>\n      <GlobalStats />\n         <WorldMap />\n      <CountriesInfo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}